<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ontrmhsis.github.io/study/</id>
    <title>Java开发学习</title>
    <updated>2020-02-28T09:36:06.421Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ontrmhsis.github.io/study/"/>
    <link rel="self" href="https://ontrmhsis.github.io/study/atom.xml"/>
    <subtitle>学习资料整理</subtitle>
    <logo>https://ontrmhsis.github.io/study/images/avatar.png</logo>
    <icon>https://ontrmhsis.github.io/study/favicon.ico</icon>
    <rights>All rights reserved 2020, Java开发学习</rights>
    <entry>
        <title type="html"><![CDATA[数据结构]]></title>
        <id>https://ontrmhsis.github.io/study/post/data-struct/</id>
        <link href="https://ontrmhsis.github.io/study/post/data-struct/">
        </link>
        <updated>2020-02-28T07:32:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="leetcode">leetcode</h1>
<h1 id="树">树</h1>
<h2 id="101对称二叉树">#101对称二叉树</h2>
<pre><code>给定一个二叉树，检查它是否是镜像对称的。例如，二叉树 [1,2,2,3,4,4,3]是对称的。
    1
   / \
  2   2
 / \ / \
3  4 4  3
</code></pre>
<pre><code class="language-java">    public boolean isSymmetric(TreeNode root) {
	      if(root == null) return true;
	      return isSymmertric(root.left, root.right);
	 }
	 private boolean isSymmertric(TreeNode t1,TreeNode t2) {
		 if(t1 == null &amp;&amp; t2 == null) return true;
		 if(t1 == null || t2 == null) return false;
		 if(t1.val != t2.val) return false;
		 return isSymmertric(t1.left, t2.right) &amp;&amp; isSymmertric(t1.right, t2.left);
	 }
</code></pre>
<Br>
<h2 id="617合并二叉树">#617合并二叉树</h2>
<pre><code>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。

你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为NULL 的节点将直接作为新二叉树的节点。
*示例1*
输入: 
	Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
输出: 
合并后的树:
	     3
	    / \
	   4   5
	  / \   \ 
	 5   4   7
</code></pre>
<pre><code class="language-java">       public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
           if(t1 != null &amp;&amp; t2 != null){
               TreeNode t3 = new TreeNode(t1.val+t2.val);
               t3.left = mergeTrees(t1.left,t2.left);
               t3.right = mergeTrees(t1.right,t2.right);
               return  t3;
           }else{
               return t1==null ? t2:t1;
           }
    }
</code></pre>
<Br>
<h2 id="二叉树旋转">二叉树旋转</h2>
]]></content>
    </entry>
</feed>